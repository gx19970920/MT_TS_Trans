function [field,filetime] = read_TSB;
% 
% Function for reading and concatenating multiply *.TSB files generated by MR6_CK
% Usage: [field,filetime] = read_TSB;
% OUTPUT:
% -field: n x 5 array, electromagnetic field in each column is Ex,Ey,Hx,Hy,FHz
% -filetime: the time of the first sample in the file.
% -TSB: one block starts with 16 byte tag information and followed by 1MB
% recording data.In the a data block, there are 16 byte tag followed by 6 channles'
% recordings and two null bytes, specified as follow:
% tag(16),CH1(1:4),D5,CH2(6:9),D5,CH3(11:14),D5,CH4(16:19),D5,CH5(21:24),D5,CH6(26:29),D5,0(31),0(32).


% Update on 2022-12-03, JF
% Copyright 2022-2023 Feng Jiang

nCh = 5; % number of channels will be output.
nScan = 1024*1024/32;
% nScan, how many simutalously 6-channel-recordings we have in 1MB data (= one block).
% '6-channel-recordings' = one scan.

nBlocks = 512; % Number of blocks in one TSM file.
filesize = 512; % Size of a TSM file recorded by OBEM_CK.
regularsize = 512;

[TSMname,TSMpath] = uigetfile('*.TSB','Select the TSBfile','MultiSelect','on');

if ~iscell(TSMname)
    nTSM = 1;
elseif iscell(TSMname)
    nTSM = length(TSMname);
else
    error('You didnot choice any TSB file!');
end

field_length = nTSM*nBlocks*nScan;
field = nan(field_length,nCh); % initial an array for magnetotelluric E and H fields.
filetime = nan(nTSM,6); % initial an array for file time derived from the file name.
%========================================================================
for iTSM = 1:nTSM
    if nTSM ==1
        TSMfile = [TSMpath,TSMname];
        timestr = TSMname(3:end-4);
        ftime = ['20',timestr(1:2),'/',timestr(3:4),'/',timestr(5:6),' ',timestr(7:8),':',timestr(9:10),':',timestr(11:12)];
        filetime(iTSM,:) = datevec(datetime(ftime));
    else
        TSMfile = [TSMpath,TSMname{iTSM}];
        
        timestr = TSMname{iTSM};
        timestr = timestr(3:end-4);
        ftime = ['20',timestr(1:2),'/',timestr(3:4),'/',timestr(5:6),' ',timestr(7:8),':',timestr(9:10),':',timestr(11:12)];
        filetime(iTSM,:) = datevec(datetime(ftime));
        
    end
    fid = fopen(TSMfile, 'rb');
    
    fseek(fid,0,'eof'); % point to the end of the file - eof'
    nbytes = ftell(fid); % how much bytes in the file.
    
    if iTSM ~=nTSM && ~isequal(nBlocks,nbytes/(16 + 1024*1024)) % check the data size of the input file.
        error(['the recorded data size in ', TSMfile,' not match the nBlocks ',nBlocks]);
    elseif iTSM == nTSM && ~isequal(nBlocks,nbytes/(16 + 1024*1024))
        warning(['the recorded data size in the last file: ', TSMfile,' not match the nBlocks ',nBlocks']);
        lastfilesize = nbytes/(16 + 1024*1024); % we only allow the last file has recording data size less than 512 Mb, and will throw away the last block data
    end
    
    fseek(fid,0,'bof'); % point to the beginning of the file - bof'
    if ~exist('lastfilesize','var')
        for iblock = 1:nBlocks
            % read the tags,!!!NOTHING IN THE TAG!!!---------------------------
            % read first 8 bytes in the tag.
            tag = fread(fid,8,'uchar');
            locktime((iTSM-1)*nBlocks + iblock) = datenum(2000+tag(1),tag(2),tag(3),tag(4),tag(5),tag(6));
            
            % read later 8 bytes ('uint64') in the tag.
            littleclock((iTSM-1)*nBlocks + iblock) = fread(fid,1,'uint64','l');
            % 'l' or 'ieee-le', Little-endian order.
            
            % read the recording numbers:--------------------------------------
            % 32: every data point is represented by 4/5 bytes, and there are 6
            % channels have recorded by MR6, so 30 bytes are needed.
            % Other 2 bytes are empty and equal to zeros.
            % one block has recording size of 16 Bytes plus 1024*1024 Bytes .
            
            % read every binary byte to decimal number.
            % function fread.m fills the columns first.
            data = fread(fid,[32,nScan],'uchar');
            
            % ch1 - ch10,corresponding to Ex,Ey,Ez,Er,Hx,Hy,FBx,FBy,FBz,Geophone.
            madrs1 = (iTSM-1)*nBlocks*nScan + (iblock-1)*nScan + 1; % memory address.
            madrs2 = (iTSM-1)*nBlocks*nScan + (iblock)*nScan;
            ind = madrs1:madrs2;

            field(ind,1) = transpose(signsymbol_32bit( data(4,:) + data(3,:)*256 + data(2,:)*256*256  + data(1,:)*256*256*256 )); % ch1 - Ex
            field(ind,2) = transpose(signsymbol_32bit( data(9,:) + data(8,:)*2^8 + data(7,:)*2^8*2^8  + data(6,:)*2^8*2^8*2^8 )); % ch2 - Ey
            field(ind,3) = transpose(signsymbol_32bit( data(19,:) + data(18,:)*2^8 + data(17,:)*2^8*2^8 + data(16,:)*2^8*2^8*2^8 )); % ch5 - Hx
            field(ind,4) = transpose(signsymbol_32bit( data(24,:) + data(23,:)*2^8 + data(22,:)*2^8*2^8 + data(21,:)*2^8*2^8*2^8 )); % ch6 - Hy
            field(ind,5) = transpose(signsymbol_32bit( data(29,:) + data(28,:)*2^8 + data(27,:)*2^8*2^8 + data(26,:)*2^8*2^8*2^8 )); % ch9 - FHz
            
        end
    else % When recording date size in the last file is less than nBlocks = 512.
        for iblock = 1:lastfilesize
            % read the tags,!!!NOTHING IN THE TAG!!!---------------------------
            % read first 8 bytes in the tag.
            tag = fread(fid,8,'uchar');
            locktime((iTSM-1)*nBlocks + iblock) = datenum(2000+tag(1),tag(2),tag(3),tag(4),tag(5),tag(6));
            
            % read later 8 bytes ('uint64') in the tag.
            littleclock((iTSM-1)*nBlocks + iblock) = fread(fid,1,'uint64','l');
            % 'l' or 'ieee-le', Little-endian order.
            
            % read the recording numbers:--------------------------------------
            % 32: every data point is represented by 3 bytes, and there are 10
            % channels have recorded by OBEM_CK, so 30 bytes are needed.
            % Other 2 bytes are empty and equal to zeros.
            % one block has recording size of 16 Bytes plus 1024*1024 Bytes .
            
            % read every binary byte to decimal number.
            % function fread.m fills the columns first.
            data = fread(fid,[32,nScan],'uchar');
            
            % ch1 - ch10,corresponding to Ex,Ey,Ez,Er,Hx,Hy,FBx,FBy,FBz,Geophone.
            madrs1 = (iTSM-1)*nBlocks*nScan + (iblock-1)*nScan + 1; % memory address.
            madrs2 = (iTSM-1)*nBlocks*nScan + (iblock)*nScan;
            ind = madrs1:madrs2;
            
            field(ind,1) = transpose(signsymbol_32bit( data(4,:) + data(3,:)*2^8 + data(2,:)*2^8*2^8  + data(1,:)*2^8*2^8*2^8 )); % ch1 - Ex
            field(ind,2) = transpose(signsymbol_32bit( data(9,:) + data(8,:)*2^8 + data(7,:)*2^8*2^8  + data(6,:)*2^8*2^8*2^8 )); % ch2 - Ey
            field(ind,3) = transpose(signsymbol_32bit( data(19,:) + data(18,:)*2^8 + data(17,:)*2^8*2^8 + data(16,:)*2^8*2^8*2^8 )); % ch5 - Hx
            field(ind,4) = transpose(signsymbol_32bit( data(24,:) + data(23,:)*2^8 + data(22,:)*2^8*2^8 + data(21,:)*2^8*2^8*2^8 )); % ch6 - Hy
            field(ind,5) = transpose(signsymbol_32bit( data(29,:) + data(28,:)*2^8 + data(27,:)*2^8*2^8 + data(26,:)*2^8*2^8*2^8 )); % ch9 - FHz
            
            field(any(isnan(field),2),:)=[]; % removal the NAN appended in the tail of field matrix.
        end % end of nblock
    end % end of "lastfilesize"
    fclose(fid);
end % end of nTSM
end % end of function